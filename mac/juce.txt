		JUCE

https://github.com/open-ephys/GUI.git

JUCE_ENABLE_REPAINT_DEBUGGING

	Arrays
Array used to hold simple, non-polymorphic objects as well as primitive types
OwnedArray holds a list of pointers to objects, and will automatically delete the objects when they are removed from the array, or when the array is itself deleted
ReferenceCountedArray holds objects derived from ReferenceCountedObject, and takes care of incrementing and decrementing their ref counts when they are added and removed from the array
StringArray special array for holding a list of strings
StringPairArray container for holding a set of strings which are keyed by another string

	AudioFormatReader
Reads samples from an audio file stream.
A subclass that reads a specific type of audio format will be created by an AudioFormat object
AudioCDReader used to read from an audio CD as if it's one big audio stream
AudioSubsectionReader if you have a reader which can read a 1000 sample file, you could wrap it in one of these to only access, e.g. samples 100 to 200, and any samples outside that will come back as 0. Accessing sample 0 from this reader will actually read the first sample from the other's subsection, which might be at a non-zero position
BufferingAudioReader uses a background thread to pre-read data from another reader
MemoryMappedAudioFormatReader specialised type to read directly from an audio file, allows for incredibly fast random-access to sample data in the mapped region of the file

	AudioSource
Base class for objects that can produce a continuous stream of audio
AudioAppComponent A base class for writing audio apps that stream from the audio i/o devices. provides a basic AudioDeviceManager object and runs audio through the default output device
ChannelRemappingAudioSource takes the audio from another source, and re-maps its input and output channels to a different arrangement. You can use this to increase or decrease the number of channels that an audio source uses, or to re-order those channels
IIRFilterAudioSource performs an IIR filter on another source
MixerAudioSource mixes together the output of a set of other AudioSources
PositionableAudioSource can be repositioned, has a current read position
ResamplingAudioSource takes an input source and changes its sample rate
ReverbAudioSource uses the Reverb class to apply a reverb to another AudioSource
ToneGeneratorAudioSource generates a sine wave
AudioTransportSource takes a PositionableAudioSource and allows it to be played, stopped, started, etc. This can also be told use a buffer and background thread to read ahead, and if can correct for different sample-rates. You may want to use one of these along with an AudioSourcePlayer and AudioIODevice to control playback of an audio file
AudioFormatReaderSource read from an AudioFormatReader
BufferingAudioSource takes another source as input, and buffers it using a thread.
Create this as a wrapper around another thread, and it will read-ahead with a background thread to smooth out playback. You can either create one of these directly, or use it indirectly using an AudioTransportSource

AudioSourceChannelInfo: *AudioSampleBuffer, i startSmple, i numSamples

AudioSampleBuffer


tracks
sndfile-info.app
AudioFormatReader::usesFloatingPointData
	AudioFormatReader (false in ctor)
	BufferingAudioReader (true in ctor)
	WavAudioFormatReader (true in ctor in case:
		format == 3
		format == 0xfffe /*WAVE_FORMAT_EXTENSIBLE*/
		  subFormat == IEEEFloatFormat
	)

AsyncUpdater - handleAsyncUpdate()=0;
ChangeBroadcaster
ChangeBroadcasterCallback: public AsyncUpdater
ChangeListener

	XCode debug
{(const char*) $VAR.text.data}:s
{(const char*) $VAR.fullPath.text.data}:s
